#20190922_Time
#by Davids Fiddle


#APC Utility BEGIN
#Globals:
use_bpm 60  #BPM for the piece
use_sched_ahead_time 0.2  #Balance between playability and stability
#States of the tracks:
states = [1,0,3,3,0,1,0,0,
          0,3,3,0,0,3,0,0,
          0,3,0,3,0,0,0,0,
          0,0,0,0,0,0,0,0,
          0,0,0,0,0,5,0,0
          ]
#0 means nothing will happen (disabled)
#1 means green (active)
#3 means red (inactive)
#5 means toggle, will switch to 7(also green)
toggle = (ring 0,3,0,1,0,7,0,5)  #For switching the lights
knobs = [48,49,50,51,52,53,54,55]  #Adresses for the knobs
knob0 = 0
knob1 = 0
knob2 = 0
knob3 = 0
knob4 = 0
knob5 = 0
knob6 = 0
knob7 = 0
define :all_lights do
  #Updates all lights
  for x in (range 0,40)
    midi_note_on x, states[x]
  end
end  #:all_lights
define :all_off do
  #Turns all lights off
  for i in (range 0,87)
    midi_note_on i,0
  end
end  #:all_off
all_off
sleep 0.1
live_loop :midi_control do
  key,vel = sync "/midi/apc_key_25/0/1/note_on"  #Wait for midi messages
  if key < 40  #Ignore messages 'out of bounds'
    states[key] = toggle[states[key]]  #Update the track values
    midi_note_on key, states[key]  #Update the track lights
    cue 'event', key
  end
end  #:midi_control
live_loop :midi_cc do
  key,val = sync "/midi/apc_key_25/0/1/control_change"  #Wait for midi messages
  case key
  when knobs[0]
    cue 'knob0', val
  when knobs[1]
    cue 'knob1', val
  when knobs[2]
    cue 'knob2', val
  when knobs[3]
    cue 'knob3', val
  when knobs[4]
    cue 'knob4', val
  when knobs[5]
    cue 'knob5', val
  when knobs[6]
    cue 'knob6', val
  when knobs[7]
    cue 'knob7', val
  end
  #Cues are sent per knob to avoid multiple listening loops syncing possibly 100 times in a second
end  #:midi_cc
all_lights  #initialise the lights
sleep 0.1
#APC_Utility END


live_loop :tick_tock do
  use_synth :fm
  use_synth_defaults amp: 0.5, sustain: 0, release: 0.5, divisor: 4, depth: 0.5
  play :f5 if states[3] == 1
  sleep 1
end  #:tick_tock

with_fx :echo, phase: 1/4.0, decay: 4, mix: 0.5 do
  live_loop :snare do
    sample :sn_generic, amp: 0.3 if states[9] == 1
    sleep 2
  end
end

live_loop :bass do
  tick
  use_synth_defaults sustain: 3, release: 2,
    amp: 0.5
  use_merged_synth_defaults note: :f3 + (ring 0).look if states[37] == 5
  use_merged_synth_defaults note: :f3 + (ring 0,0,3,-2).stretch(2).look if states[37] == 7
  synth :hollow if states[5] == 1
  synth :growl if states[13] == 1
  sleep 4
end

live_loop :perc do
  tick
  use_sample_defaults amp: 0.5
  if (bools *(knit 0,4,0,8,0,4,1,4,0,12)).look && (bools 0,1,0,0).look && states[17] == 1
    with_fx :slicer, probability: 0.6, prob_pos: 0.3, wave: 0, smooth: 1/8.0, phase: 1/4.0 do
      sample :ambi_sauna, rate: 2.0
    end
  end
  sample :perc_bell2, rate: 1/4.0 if (bools 1,0,0,0).look && (bools *(knit 0,8,1,4,0,8,0,16)).look && states[19] == 1
  sample :perc_swoosh, rate: -1/2.0 if (bools 1,0,0,0).look && (bools *(knit 0,4,1,4,0,8)).look && states[10] == 1
  sample :drum_splash_hard, rate: 1/3.0 if (bools 0,0,1,0).look && (bools *(knit 0,12,1,4,0,16)).look && states[2] == 1
  sample :bd_haus, amp: 0.8 if (bools 1,0,0,0,0,0,0,0).look && states[0] == 1
  sleep 0.25
end

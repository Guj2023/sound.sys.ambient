#Polyphonic Synth for the Strawberry Synth project
#Coded by Davids Fiddle
#v0.5

use_debug false

#Variables:
#this list stores the currently played note in the corresponding voice. 0 means the voice is inactive
current = [0,0,0,0,0,0]
#Adresses of the midi device used for this synth
io_midi_on = "/midi/apc_key_25_midi_1/1/2/note_on"
io_midi_off = "/midi/apc_key_25_midi_1/1/2/note_off"
io_midi_knob = "/midi/apc_key_25_midi_1/1/1/control_change"
io_midi_buttons = "/midi/apc_key_25_midi_1/1/1/note_on"
io_key_lpf = 51
io_key_hpf = 55
io_key_res = 50
io_key_att = 48
io_key_rel = 49
#Synth voice settings:
#attack/release times
att = 0
rel = 0
#synth_defaults
dep = 1 #for :fm
div = 2 #for :fm
res = 0.8 #resonance, for multiple synths
pwm = 0.5 #pulse width
#sound source to use
syn0 = :tri
syn1 = :tri
syn2 = :tri
syn3 = :tri
#transposition from the pressed key
trans0 = 0
trans1 = 0
trans2 = 0
trans3 = 0
#fine detune
det0 = 0
det1 = 0
det2 = 0
det3 = 0
#volume of the source
amp0 = 1
amp1 = 1
amp2 = 1
amp3 = 1
#FX settings
lpf_cut = 127
hpf_cut = 0

#reading attack/release times
live_loop :get_ar do
  key, val  sync io_midi_knob
  if key == io_key_att
    att = val / 64.0
  elsif key == io_key_rel
    rel = val / 64.0
end

#Synthesis starts here:
with_fx :rlpf, cutoff: 127, cutoff_slide: 0.1, res: 0.5, res_slide: 0.1 do |lpf|
with_fx :rhpf, cutoff: 0, cutoff_slide: 0.1, res: 0.5, res_slide: 0.1 do |hpf|
#FX controls
live_loop :con_filter do
  key, val  sync io_midi_knob
  if key == io_key_lpf
    control lpf, cutoff: val  #input = midi note
  elsif key == io_key_hpf
    control hpf, cutoff: val  #input = midi note
  elsif key == io_key_res
    control lpf, res: val / 127.1  #mapped to 0<=res<1
    control hpf, res: val / 127.1  #mapped to 0<=res<1
  end
end

#Voice blocks for 6x polyphony
#Can be extended
#These blocks are almost identical, only looking for different sync calls
live_loop :p0 do
  use_real_time  #should remove latency
  key, vel = sync 'p0_on'  #listens to the sync from the distributing loop
  use_synth_defaults depth: dep, divisor: div, res: res #pulse width?
  v0 = synth syn0, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans0] + (det0 / 100.0), sustain: 360, amp: amp0, attack: att, amp_slide: rel  #the synth call. inputs every parameter
  v1 = synth syn1, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans1] + (det1 / 100.0), sustain: 360, amp: amp1, attack: att, amp_slide: rel  #the key -> note mapping prevents the transposition from going out of the midi range
  v2 = synth syn2, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans2] + (det2 / 100.0), sustain: 360, amp: amp2, attack: att, amp_slide: rel  #the amp_slide replaces the release because killing a synth cuts it of without the release time
  v3 = synth syn3, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans3] + (det3 / 100.0), sustain: 360, amp: amp3, attack: att, amp_slide: rel  #this means that this voice is not available during the release time
  sync 'p0_off'  #waits for the note_off cue
  control v0, amp: 0  #start to slide the volume towards 0
  control v1, amp: 0
  control v2, amp: 0
  control v3, amp: 0
  sleep rel  #kill the synth when the volume hits 0
  kill v0
  kill v1
  kill v2
  kill v3
end
#no comments on the other blocks as they are identical
live_loop :p1 do
  use_real_time
  key, vel = sync 'p1_on'  #listens to the sync from the distributing loop
  use_synth_defaults depth: dep, divisor: div, res: res #pulse width?
  v0 = synth syn0, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans0] + (det0 / 100.0), sustain: 360, amp: amp0, attack: att, amp_slide: rel
  v1 = synth syn1, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans1] + (det1 / 100.0), sustain: 360, amp: amp1, attack: att, amp_slide: rel
  v2 = synth syn2, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans2] + (det2 / 100.0), sustain: 360, amp: amp2, attack: att, amp_slide: rel
  v3 = synth syn3, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans3] + (det3 / 100.0), sustain: 360, amp: amp3, attack: att, amp_slide: rel
  sync 'p1_off'
  control v0, amp: 0
  control v1, amp: 0
  control v2, amp: 0
  control v3, amp: 0
  sleep rel
  kill v0
  kill v1
  kill v2
  kill v3
end
live_loop :p2 do
  use_real_time
  key, vel = sync 'p2_on'  #listens to the sync from the distributing loop
  use_synth_defaults depth: dep, divisor: div, res: res #pulse width?
  v0 = synth syn0, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans0] + (det0 / 100.0), sustain: 360, amp: amp0, attack: att, amp_slide: rel
  v1 = synth syn1, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans1] + (det1 / 100.0), sustain: 360, amp: amp1, attack: att, amp_slide: rel
  v2 = synth syn2, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans2] + (det2 / 100.0), sustain: 360, amp: amp2, attack: att, amp_slide: rel
  v3 = synth syn3, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans3] + (det3 / 100.0), sustain: 360, amp: amp3, attack: att, amp_slide: rel
  sync 'p2_off'
  control v0, amp: 0
  control v1, amp: 0
  control v2, amp: 0
  control v3, amp: 0
  sleep rel
  kill v0
  kill v1
  kill v2
  kill v3
end
live_loop :p3 do
  use_real_time
  key, vel = sync 'p3_on'  #listens to the sync from the distributing loop
  use_synth_defaults depth: dep, divisor: div, res: res #pulse width?
  v0 = synth syn0, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans0] + (det0 / 100.0), sustain: 360, amp: amp0, attack: att, amp_slide: rel
  v1 = synth syn1, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans1] + (det1 / 100.0), sustain: 360, amp: amp1, attack: att, amp_slide: rel
  v2 = synth syn2, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans2] + (det2 / 100.0), sustain: 360, amp: amp2, attack: att, amp_slide: rel
  v3 = synth syn3, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans3] + (det3 / 100.0), sustain: 360, amp: amp3, attack: att, amp_slide: rel
  sync 'p3_off'
  control v0, amp: 0
  control v1, amp: 0
  control v2, amp: 0
  control v3, amp: 0
  sleep rel
  kill v0
  kill v1
  kill v2
  kill v3
end
live_loop :p4 do
  use_real_time
  key, vel = sync 'p4_on'  #listens to the sync from the distributing loop
  use_synth_defaults depth: dep, divisor: div, res: res #pulse width?
  v0 = synth syn0, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans0] + (det0 / 100.0), sustain: 360, amp: amp0, attack: att, amp_slide: rel
  v1 = synth syn1, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans1] + (det1 / 100.0), sustain: 360, amp: amp1, attack: att, amp_slide: rel
  v2 = synth syn2, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans2] + (det2 / 100.0), sustain: 360, amp: amp2, attack: att, amp_slide: rel
  v3 = synth syn3, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans3] + (det3 / 100.0), sustain: 360, amp: amp3, attack: att, amp_slide: rel
  sync 'p4_off'
  control v0, amp: 0
  control v1, amp: 0
  control v2, amp: 0
  control v3, amp: 0
  sleep rel
  kill v0
  kill v1
  kill v2
  kill v3
end
live_loop :p5 do
  use_real_time
  key, vel = sync 'p5_on'  #listens to the sync from the distributing loop
  use_synth_defaults depth: dep, divisor: div, res: res #pulse width?
  v0 = synth syn0, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans0] + (det0 / 100.0), sustain: 360, amp: amp0, attack: att, amp_slide: rel
  v1 = synth syn1, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans1] + (det1 / 100.0), sustain: 360, amp: amp1, attack: att, amp_slide: rel
  v2 = synth syn2, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans2] + (det2 / 100.0), sustain: 360, amp: amp2, attack: att, amp_slide: rel
  v3 = synth syn3, note: (ramp *(ring :r,*(range 1,127),:r))[key + trans3] + (det3 / 100.0), sustain: 360, amp: amp3, attack: att, amp_slide: rel
  sync 'p5_off'
  control v0, amp: 0
  control v1, amp: 0
  control v2, amp: 0
  control v3, amp: 0
  sleep rel
  kill v0
  kill v1
  kill v2
  kill v3
end
#Synth voices end
end
end
#Filters end


live_loop :distrib_on, delay: 1 do
  #distributing loop for note_on events
  #looks up the current list and sends cues to the voice loops
  use_real_time
  key, vel = sync io_midi_on
  if current[0] == 0
    cue 'p0_on', key, vel  #sends the cue with the key to play
    current[0] = key  #updates the current list
  elsif current[1] == 0
    cue 'p1_on', key, vel
    current[1] = key
  elsif current[2] == 0
    cue 'p2_on', key, vel
    current[2] = key
  elsif current[3] == 0
    cue 'p3_on', key, vel
    current[3] = key
   elsif current[4] == 0
    cue 'p4_on', key, vel
    current[4] = key
   elsif current[5] == 0
    cue 'p5_on', key, vel
    current[5] = key
  end
end

live_loop :distrib_off do
  #listens to note_off events
  usr_real_time
  key, vel = sync io_midi_off
  if current[0] == key
    cue 'p0_off'
    current[0] = 0  #resets the current list so this voice can be used again
  elsif current[1] == key
    cue 'p1_off'
    current[1] = 0
  elsif current[2] == key
    cue 'p2_off'
    current[2] = 0
  elsif current[3] == key
    cue 'p3_off'
    current[3] = 0
  elsif current[4] == key
    cue 'p4_off'
    current[4] = 0
  elsif current[5] == key
    cue 'p5_off'
    current[5] = 0
  end
end

#Preset listener:

live_loop :look_preset do
  key, vel = sync io_midi_buttons
  #Trigger presets when a button is pressed and reset lights. The preset defs activate the lights.
  #Lights will flash if a preset is not filled
  reset_preset_lights
  preset0 if key == 81
  preset1 if key == 64
  preset2 if key == 65
  preset3 if key == 66
  preset4 if key == 67
  preset5 if key == 68
  preset6 if key == 69
  preset7 if key == 70
  preset7 if key == 71
  
end

#reset the lights on the presets
define :reset_preset_lights do
  #one call for every button that is used for presets
  midi_note_on 64,0,channel: 1
  midi_note_on 65,0,channel: 1
  midi_note_on 66,0,channel: 1
  midi_note_on 67,0,channel: 1
  midi_note_on 68,0,channel: 1
  midi_note_on 69,0,channel: 1
  midi_note_on 70,0,channel: 1
  midi_note_on 71,0,channel: 1
  midi_note_on 81,0,channel: 1
end

#Definitions for all presets
define :preset0 do
  midi_note_on 81,1,channel: 1
  puts "00-Raw"  #Name of this Preset
  #attack/release times
  att = 0
  rel = 0
  dep = 1 #for :fm
div = 2 #for :fm
res = 0.8 #resonance, for multiple synths
pwm = 0.5 #pulse width
  #sound source to use
  syn0 = :tri
  syn1 = :tri
  syn2 = :tri
  syn3 = :tri
  #transposition from the pressed key
  trans0 = 0
  trans1 = 0
  trans2 = 0
  trans3 = 0
  #fine detune
  det0 = 0
  det1 = 0
  det2 = 0
  det3 = 0
  #volume of the source
  amp0 = 1
  amp1 = 1
  amp2 = 1
  amp3 = 1
end
define :preset1 do
  midi_note_on 64,2,channel: 1
  puts "01-FM"  #Name of this Preset
  #attack/release times
  att = 0
  rel = 0.1
  dep = 1 #for :fm
  div = 2 #for :fm
  res = 0.8 #resonance, for multiple synths
  pwm = 0.5 #pulse width
  #sound source to use
  syn0 = :fm
  syn1 = :fm
  syn2 = :fm
  syn3 = :fm
  #transposition from the pressed key
  trans0 = 0
  trans1 = 0
  trans2 = 12
  trans3 = 12
  #fine detune
  det0 = 0
  det1 = -2
  det2 = 0
  det3 = 2
  #volume of the source
  amp0 = 1
  amp1 = 1
  amp2 = 0.8
  amp3 = 0.8
end
define :preset2 do
  midi_note_on 65,2,channel: 1
  puts "02-Empty"  #Name of this Preset
end
define :preset3 do
  midi_note_on 66,2,channel: 1
  puts "03-Empty"  #Name of this Preset
end
define :preset4 do
  midi_note_on 67,2,channel: 1
  puts "04-Empty"  #Name of this Preset
end
define :preset5 do
  midi_note_on 68,2,channel: 1
  puts "05-Empty"  #Name of this Preset
end
define :preset6 do
  midi_note_on 69,2,channel: 1
  puts "06-Empty"  #Name of this Preset
end
define :preset7 do
  midi_note_on 70,2,channel: 1
  puts "07-Empty"  #Name of this Preset
end
define :preset8 do
  midi_note_on 71,2,channel: 1
  puts "08-Empty"  #Name of this Preset
end

################
#To Do:
#real time!!!
#cleanup, comments
################
